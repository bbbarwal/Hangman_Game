from tkinter import *from tkinter import StringVarimport numpy as npfrom tkinter import messageboximport randomtop = Tk()top.geometry("400x600")top.configure(bg="White")top.title('HANGMAN by Barwal')def Yes():    global dictionary    global word_dictionary    top.destroy()    dictionary={"Easy":[0,1,2,3],"Medium":[0,1,2,3,4],"Hard":[0,1,2,3,4,5]}    word_dictionary={0:0,1:2,2:4,3:6,4:8,5:10,6:12,7:14,8:16}    top2 = Tk()    top2.geometry("400x600")    top2.configure(bg="White")    top2.title('HANGMAN by Barwal')    m2=Message(top2,font=('Times',13),bg="Red",text="By Baibhav Barwal \n \n \n ",relief=RAISED)    m2.place(x=290,y=580)    def word_creator():        global word_count        global word        file=open("StoringMode.txt","r")        word_count=int(file.read())        four_letter_easy=['acid', 'also', 'army', 'baby', 'ball', 'bank', 'bath', 'beat', 'beer', 'belt', 'bill', 'blow', 'boat', 'bomB', 'bone', 'boom', 'boss', 'bowl', 'burn', 'busy', 'calm', 'camp', 'care', 'cash', 'cell', 'chip', 'club', 'coat', 'cold', 'cook', 'cope', 'core', 'crew', 'dark', 'date', 'days', 'deal', 'dear', 'deep', 'desk', 'dick', 'disc', 'does', 'door', 'down', 'drew', 'drug', 'duke', 'duty', 'earn', 'east', 'edge', 'ever', 'face', 'fail', 'fall', 'fast', 'fear', 'felt', 'feel', 'file', 'film', 'fine', 'firm', 'five', 'flow', 'foot', 'form', 'four', 'fuel', 'fund', 'game', 'gave', 'gene', 'girl', 'glad', 'goes', 'golf', 'good', 'grew', 'grow', 'hair', 'hall', 'hang', 'harm', 'have', 'hear', 'held', 'here', 'high', 'hire', 'hole', 'home', 'host', 'huge', 'hunt', 'idea', 'into', 'item', 'jane', 'john', 'jump', 'just', 'keep', 'kept', 'kill', 'king', 'knew', 'lack', 'laid', 'land', 'last', 'lead', 'less', 'lift', 'line', 'live', 'loan', 'logo', 'look', 'lose', 'lost', 'luck', 'mail', 'make', 'many', 'mass', 'meal', 'meat', 'menu', 'mike', 'milk', 'mind', 'miss', 'mood', 'more', 'move', 'must', 'navy', 'neck', 'news', 'nick', 'none', 'note', 'once', 'onto', 'over', 'pack', 'paid', 'pair', 'park', 'past', 'peak', 'pink', 'plan', 'plot', 'plus', 'pool', 'port', 'puLl', 'push', 'rail', 'rank', 'rate', 'real', 'rely', 'rest', 'rich', 'ring', 'risk', 'rock', 'roLl', 'rOom', 'rose', 'rush', 'safe', 'sake', 'salt', 'sand', 'seat', 'seek', 'seen', 'seLl', 'sent', 'ship', 'shot', 'shut', 'side', 'site', 'skin', 'slow', 'soft', 'sold', 'some', 'song', 'soul', 'star', 'step', 'such', 'sure', 'tale', 'tall', 'tape', 'team', 'tell', 'term', 'text', 'that', 'then', 'thin', 'thus', 'time', 'told', 'tone', 'took', 'tour', 'tree', 'true', 'turn', 'unit', 'used', 'vary', 'very', 'view', 'wage', 'wake', 'wall', 'ward', 'wash', 'ways', 'wear', 'well', 'were', 'what', 'whom', 'wife', 'will', 'wine', 'wire', 'wish', 'word', 'work', 'yeah', 'your', 'zone']        six_letter_medium=['accept', 'across', 'action', 'actual', 'advise', 'afford', 'agency', 'almost', 'amount', 'annual', 'anyone', 'appeal', 'around', 'artist', 'assume', 'attend', 'author', 'backed', 'battle', 'became', 'before', 'behind', 'belong', 'better', 'bishop', 'bottle', 'bought', 'breath', 'bright', 'budget', 'bureau', 'camera', 'cannot', 'career', 'casual', 'center', 'chance', 'charge', 'choose', 'church', 'client', 'closer', 'column', 'coming', 'comply', 'corner', 'county', 'course', 'create', 'crisis', 'damage', 'dealer', 'decade', 'defeat', 'define', 'demand', 'deputy', 'design', 'detail', 'device', 'dinner', 'doctor', 'domain', 'driven', 'during', 'eating', 'effect', 'eighth', 'eleven', 'empire', 'enable', 'energy', 'engine', 'ensure', 'entity', 'escape', 'ethnic', 'except', 'expand', 'expert', 'extend', 'fabric', 'factor', 'fairly', 'family', 'father', 'female', 'filing', 'finish', 'flight', 'follow', 'forest', 'formal', 'former', 'fought', 'French', 'future', 'gather', 'german', 'golden', 'growth', 'handed', 'happen', 'headed', 'height', 'holder', 'impact', 'income', 'injury', 'intend', 'invest', 'itself', 'joseph', 'killed', 'latest', 'launch', 'leader', 'leaves', 'length', 'letter', 'likely', 'liquid', 'little', 'losing', 'luxury', 'making', 'manner', 'margin', 'marked', 'martin', 'matter', 'medium', 'memory', 'merely', 'method', 'miller', 'minute', 'mobile', 'modest', 'moment', 'mostly', 'motion', 'murder', 'mutual', 'narrow', 'native', 'nearby', 'nights', 'normal', 'notion', 'object', 'office', 'online', 'orange', 'output', 'packed', 'parent', 'patent', 'period', 'person', 'picked', 'player', 'plenty', 'police', 'prefer', 'prince', 'profit', 'proven', 'pursue', 'random', 'rather', 'reader', 'reason', 'recent', 'reduce', 'regard', 'region', 'relief', 'remote', 'repair', 'replay', 'rescue', 'result', 'retain', 'reveal', 'reward', 'rising', 'ruling', 'salary', 'saving', 'scheme', 'screen', 'season', 'secret', 'secure', 'select', 'senior', 'server', 'severe', 'should', 'signed', 'silver', 'simply', 'sister', 'smooth', 'solely', 'source', 'speech', 'spoken', 'spring', 'stable', 'steady', 'strain', 'street', 'strict', 'string', 'struck', 'submit', 'suffer', 'summit', 'surely', 'switch', 'system', 'talent', 'taught', 'tender', 'thanks', 'thirty', 'threat', 'ticket', 'timing', 'toward', 'treaty', 'twelve', 'unable', 'united', 'unlike', 'useful', 'varied', 'versus', 'vision', 'volume', 'wealth', 'weight', 'window', 'winter', 'wonder', 'wright', 'yellow']        eight_letter_hard=['abstract', 'accepted', 'accuracy', 'achieved', 'activity', 'addition', 'adjacent', 'advanced', 'advocate', 'aircraft', 'although', 'analysis', 'anything', 'apparent', 'approach', 'argument', 'assembly', 'athletic', 'attitude', 'audience', 'aviation', 'bacteria', 'bathroom', 'benjamin', 'boundary', 'breeding', 'bulletin', 'calendar', 'capacity', 'catching', 'Catholic', 'cellular', 'chairman', 'chemical', 'circular', 'clearing', 'clothing', 'colonial', 'commence', 'complain', 'composed', 'comprise', 'conclude', 'conflict', 'congress', 'constant', 'continue', 'contrary', 'convince', 'coverage', 'creation', 'criminal', 'crossing', 'currency', 'database', 'daylight', 'deciding', 'decrease', 'definite', 'delivery', 'designer', 'diabetes', 'diameter', 'director', 'disaster', 'discount', 'disorder', 'distance', 'district', 'division', 'document', 'dominant', 'doubtful', 'dressing', 'duration', 'earnings', 'educated', 'eighteen', 'electric', 'emerging', 'employee', 'engaging', 'enormous', 'entrance', 'equality', 'estimate', 'eventual', 'everyone', 'exchange', 'exercise', 'exposure', 'external', 'familiar', 'feedback', 'finished', 'flagship', 'floating', 'foothill', 'foremost', 'fourteen', 'franklin', 'friendly', 'function', 'generous', 'goodwill', 'graduate', 'grateful', 'guidance', 'hardware', 'highland', 'homeless', 'hospital', 'identify', 'ideology', 'incident', 'increase', 'indirect', 'informal', 'inherent', 'innocent', 'instance', 'intended', 'interest', 'internal', 'intimate', 'invasion', 'isolated', 'judicial', 'keyboard', 'language', 'learning', 'lifetime', 'likewise', 'literary', 'magazine', 'maintain', 'marginal', 'material', 'maximize', 'measured', 'medieval', 'merchant', 'military', 'minister', 'minority', 'modeling', 'momentum', 'moreover', 'mountain', 'movement', 'national', 'nineteen', 'notebook', 'observer', 'offering', 'offshore', 'opponent', 'optimism', 'ordinary', 'original', 'overhead', 'overview', 'parallel', 'patented', 'peaceful', 'personal', 'petition', 'pipeline', 'pleasant', 'politics', 'portrait', 'positive', 'powerful', 'precious', 'presence', 'pressing', 'previous', 'printing', 'probable', 'producer', 'progress', 'proposal', 'protocol', 'provider', 'publicly', 'pursuant', 'question', 'reaction', 'receiver', 'regional', 'relation', 'relevant', 'reliance', 'remember', 'repeated', 'republic', 'research', 'resident', 'resource', 'restrict', 'rigorous', 'sampling', 'schedule', 'seasonal', 'security', 'sentence', 'sequence', 'shipping', 'shoulder', 'situated', 'software', 'somebody', 'southern', 'specific', 'sporting', 'standing', 'sterling', 'strategy', 'striking', 'stunning', 'suitable', 'supposed', 'surprise', 'sweeping', 'symbolic', 'syndrome', 'tailored', 'tangible', 'taxpayer', 'tendency', 'terrible', 'thirteen', 'thousand', 'tomorrow', 'tracking', 'transfer', 'treasury', 'tropical', 'ultimate', 'universe', 'unlikely', 'variable', 'victoria', 'volatile', 'weakness', 'whatever', 'wherever', 'wireless', 'woodland', 'yourself', 'abstract', 'accepted', 'accuracy', 'achieved', 'activity', 'addition', 'adjacent', 'advanced', 'advocate', 'aircraft', 'although', 'analysis', 'anything', 'apparent', 'approach', 'argument', 'assembly', 'athletic', 'attitude', 'audience', 'aviation', 'bacteria', 'bathroom', 'benjamin', 'boundary', 'breeding', 'bulletin', 'calendar', 'capacity', 'catching', 'Catholic', 'cellular', 'chairman', 'chemical', 'circular', 'clearing', 'clothing', 'colonial', 'commence', 'complain', 'composed', 'comprise', 'conclude', 'conflict', 'congress', 'constant', 'continue', 'contrary', 'convince', 'coverage', 'creation', 'criminal', 'crossing', 'currency', 'database', 'daylight', 'deciding', 'decrease', 'definite', 'delivery', 'designer', 'diabetes', 'diameter', 'director', 'disaster', 'discount', 'disorder', 'distance', 'district', 'division', 'document', 'dominant', 'doubtful', 'dressing', 'duration', 'earnings', 'educated', 'eighteen', 'electric', 'emerging', 'employee', 'engaging', 'enormous', 'entrance', 'equality', 'estimate', 'eventual', 'everyone', 'exchange', 'exercise', 'exposure', 'external', 'familiar', 'feedback', 'finished', 'flagship', 'floating', 'foothill', 'foremost', 'fourteen', 'franklin', 'friendly', 'function', 'generous', 'goodwill', 'graduate', 'grateful', 'guidance', 'hardware', 'highland', 'homeless', 'hospital', 'identify', 'ideology', 'incident', 'increase', 'indirect', 'informal', 'inherent', 'innocent', 'instance', 'intended', 'interest', 'internal', 'intimate', 'invasion', 'isolated', 'judicial', 'keyboard', 'language', 'learning', 'lifetime', 'likewise', 'literary', 'magazine', 'maintain', 'marginal', 'material', 'maximize', 'measured', 'medieval', 'merchant', 'military', 'minister', 'minority', 'modeling', 'momentum', 'moreover', 'mountain', 'movement', 'national', 'nineteen', 'notebook', 'observer', 'offering', 'offshore', 'opponent', 'optimism', 'ordinary', 'original', 'overhead', 'overview', 'parallel', 'patented', 'peaceful', 'personal', 'petition', 'pipeline', 'pleasant', 'politics', 'portrait', 'positive', 'powerful', 'precious', 'presence', 'pressing', 'previous', 'printing', 'probable', 'producer', 'progress', 'proposal', 'protocol', 'provider', 'publicly', 'pursuant', 'question', 'reaction', 'receiver', 'regional', 'relation', 'relevant', 'reliance', 'remember', 'repeated', 'republic', 'research', 'resident', 'resource', 'restrict', 'rigorous', 'sampling', 'schedule', 'seasonal', 'security', 'sentence', 'sequence', 'shipping', 'shoulder', 'situated', 'software', 'somebody', 'southern', 'specific', 'sporting', 'standing', 'sterling', 'strategy', 'striking', 'stunning', 'suitable', 'supposed', 'surprise', 'sweeping', 'symbolic', 'syndrome', 'tailored', 'tangible', 'taxpayer', 'tendency', 'terrible', 'thirteen', 'thousand', 'tomorrow', 'tracking', 'transfer', 'treasury', 'tropical', 'ultimate', 'universe', 'unlikely', 'variable', 'victoria', 'volatile', 'weakness', 'whatever', 'wherever', 'wireless', 'woodland', 'yourself']        if word_count==4:            word=random.choice(four_letter_easy)        elif word_count==6:            word=random.choice(six_letter_medium)        elif word_count==8:            word=random.choice(eight_letter_hard)        return (word)    def Convert(string):        output=[]        output[:0]=string        return output    def underscore_creator(randnum,word):        arrayed_word=Convert(word)        answer=[]        for i in range(len(randnum)):            answer.append(arrayed_word[randnum[i]])            arrayed_word[randnum[i]]="_"        return (answer,arrayed_word)    def randomize_array_of_numbers(word):        randnums=np.random.randint(0,len(word),len(word)-3)        return randnums    def array_to_word(targetted_array):        final_word=''        for i in range(len(targetted_array)):            final_word=final_word+targetted_array[i]        return final_word    def hangman_displayer(arrayed_word):        Label(top2,text=array_to_word(arrayed_word), bg="Light Blue", font=("Times 40 italic bold")).place(x=130,y=0)    def seperate_by_space(arrayed_word):        new_word=[]        for i in range(len(arrayed_word)):            new_word.append(arrayed_word[i])            new_word.append(" ")        return (new_word)    def display_choice(array,attempts,word_arrayed,arrayed_word,word):        Lb1=Listbox(top2,highlightcolor="Sky Blue",relief=RIDGE,selectbackground="Blue",height=16)        for i in range(len(array)):            Lb1.insert(i,array[i])        Lb1.place(x=100,y=100)        button=Button(top2,text="GUESS!",command=lambda: getSelection(Lb1,attempts,word_arrayed,arrayed_word,word),highlightbackground="White")        button.place(x=100,y=450)    def getSelection(Lb1,attempts,word_arrayed,arrayed_word,word):        values=Lb1.curselection()        if values:            index=values[0]            value=Lb1.get(index)        if value in answers:            messagebox.showinfo("Great","Correct Guess")            show_attempts_in_true(attempts)            Lb1.delete(values,None)            update_hangman(word_arrayed,arrayed_word,value)            check_hangman(arrayed_word,word)        else:            messagebox.showerror("Sorry", "Incorrect Guess")            show_attempts_in_false(attempts)            Lb1.delete(values,None)            check_hangman(arrayed_word,word)    def check_hangman(arrayed_word,word):        word_from_user=''        for i in range(0,len(arrayed_word),2):            word_from_user=word_from_user+arrayed_word[i]        if word_from_user==word:            messagebox.showinfo(message="Congratulation! You Won The Hangman Game")            Exit_2()    def update_hangman(word_arrayed,arrayed_word,value):        length=len(word_arrayed)        for i in range(length):            if value==word_arrayed[i:i+1]:                required_value1=i        for j in range(length-1,-1,-1):            if value==word_arrayed[j:j+1]:                required_value2=j        if required_value1==required_value2:            from_dict_value=word_dictionary.get(required_value1)            arrayed_word[from_dict_value]=value        elif required_value1!=required_value2:            spot1=word_dictionary.get(required_value1)            spot2=word_dictionary.get(required_value2)            if arrayed_word[spot1]=="_":                arrayed_word[spot1]=value            elif arrayed_word[spot2]=="_":                arrayed_word[spot2]=value        hangman_displayer(arrayed_word)    def show_attempts_in_true(attempts):        try:            a_ttempts_true=attempts[-1]            concat="Number of Attempts Left: "+str(a_ttempts_true)            Label(top2,text=concat,bg="Green").place(x=99,y=373)        except:            msg1=messagebox.askyesnocancel(title="Lost!",message="You're out of choice. Do you wish to play again?")            if msg1==True:                pre_main()            elif msg1==False:                top2.destroy()    def show_attempts_in_false(attempts):        try:            del attempts[-1]            a_ttempts_false=attempts[-1]            concat="Number of Attempts Left: "+str(a_ttempts_false)            Label(top2,text=concat,bg="Red").place(x=99,y=373)        except:            msg="The word is "+word+". However, you lost because you're out of choice. "            msg1=messagebox.showwarning(title="Lost!",message=msg)    def Exit_2():        top2.destroy()    def main():        global answers        global arrayed_word        global word        word=word_creator()        word_arrayed=array_to_word(word)        Button(top2,text="QUIT!",command=Exit_2,highlightbackground="White").place(x=200,y=450)        randnum=randomize_array_of_numbers(word)        answers,arrayed_word=underscore_creator(randnum,word)        alphabets=[]        confused_answer_list=[]        for i in range(97,123):            alphabets.append(chr(i))        for j in range(len(answers)+14):            wordx=random.choice(alphabets)            if wordx not in (answers):                confused_answer_list.append(wordx)        for x in range(len(answers)):            if answers[x]!="_":                confused_answer_list.append(answers[x])        random.shuffle(confused_answer_list)        arrayed_word=seperate_by_space(arrayed_word)        hangman_displayer(arrayed_word)        Convert(word)        if word_count==4:            setting="Easy"            looper=4        elif word_count==6:            setting="Medium"            looper=5        elif word_count==8:            setting="Hard"            looper=5        attempts=dictionary.get(setting)        for i in range(looper):            display_choice(confused_answer_list,attempts,word_arrayed,arrayed_word,word)    main()    top2.mainloop()def Exit():    top.destroy()def pre_main():    global B_easy,B_medium,B_hard,msg    var=StringVar()    m1=Message(top,textvariable=var,font=('Times', 25, "bold" ), bg="White")    m1.pack()    var.set('      Hang  Man  Game')    m2=Message(top,font=('Times',13),bg="Red",text="By Baibhav Barwal \n \n \n ",relief=RAISED)    m2.place(x=290,y=580)    def Easy():        file=open("StoringMode.txt","w")        file.write("4")        B_easy.destroy()        B_medium.destroy()        B_hard.destroy()        msg.destroy()        play_button()        B2 = Button(top, text = "Exit", command = Exit, relief=RAISED, highlightbackground="white", bg="RED")        B2.place(x=210,y=450)    def Medium():        file=open("StoringMode.txt","w")        file.write("6")        B_easy.destroy()        B_medium.destroy()        B_hard.destroy()        msg.destroy()        play_button()        B2 = Button(top, text = "Exit", command = Exit, relief=RAISED, highlightbackground="white", bg="RED")        B2.place(x=210,y=450)    def Hard():        file=open("StoringMode.txt","w")        file.write("8")        B_easy.destroy()        B_medium.destroy()        B_hard.destroy()        msg.destroy()        play_button()        B2 = Button(top, text = "Exit", command = Exit, relief=RAISED, highlightbackground="white", bg="RED")        B2.place(x=210,y=450)    msg=Label(top,text="Choose the difficulty: ")    msg.place(x=130,y=330)    msg.configure(bg="cyan")    B_easy=Button(top,text="Easy")    B_easy.place(x=100,y=350)    B_easy.configure(command=Easy,highlightbackground="White")    B_medium=Button(top,text="Medium")    B_medium.place(x=165,y=350)    B_medium.configure(command=Medium,highlightbackground="White")    B_hard=Button(top,text="Hard")    B_hard.place(x=250,y=350)    B_hard.configure(command=Hard,highlightbackground="White")    def play_button():        msg1=Label(top,text="Press Proceed to play...")        msg1.place(x=120,y=430)        msg1.configure(bg="cyan")        B1 = Button(top, text = "Proceed", command =Yes, relief=RAISED, highlightbackground="white", bg="GREEN")        B1.place(x=120,y=450)    w=Message(        top,        text="RULES for HANGMAN: \n 1. Easy mode will get to play 3 incorrect chances. \n 2. Medium mode will get to play for 4 incorrect chances. \n 3. Hard mode will get to play for 5 incorrect chances. \n 4. If there are two same letters in the game, a single guess will not reveal both the letters. \n 5. In the game, you’ll be given a set of letters. Scroll down, there might be some more. \n 6. Keep track of the chances left- you might run out.",        bg="White",        relief=RAISED    )    w.place(x=20,y=60)    top.mainloop()pre_main()